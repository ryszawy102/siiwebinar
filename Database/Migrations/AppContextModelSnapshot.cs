// <auto-generated />
using Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Database.Migrations
{
    [DbContext(typeof(AppContext))]
    partial class AppContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Database.Models.Hobby", b =>
                {
                    b.Property<int>("HobbyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("HobbyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeOfRisk")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HobbyId");

                    b.ToTable("Hobbies");

                    b.HasData(
                        new
                        {
                            HobbyId = 1,
                            HobbyName = "Football"
                        },
                        new
                        {
                            HobbyId = 2,
                            HobbyName = "Volleyball"
                        },
                        new
                        {
                            HobbyId = 3,
                            HobbyName = "Basketball"
                        },
                        new
                        {
                            HobbyId = 4,
                            HobbyName = "Fashion"
                        },
                        new
                        {
                            HobbyId = 5,
                            HobbyName = "Reading books"
                        },
                        new
                        {
                            HobbyId = 6,
                            HobbyName = "Book writer"
                        },
                        new
                        {
                            HobbyId = 7,
                            HobbyName = "Shooting"
                        },
                        new
                        {
                            HobbyId = 8,
                            HobbyName = "Traveling"
                        },
                        new
                        {
                            HobbyId = 9,
                            HobbyName = "Speleologist"
                        },
                        new
                        {
                            HobbyId = 10,
                            HobbyName = "Mountain hiker"
                        });
                });

            modelBuilder.Entity("Database.Models.Office", b =>
                {
                    b.Property<int>("OfficeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("OfficeCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OfficeEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OfficeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OfficePostCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OfficeReceptionTelephone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OfficeStreet")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OpenYear")
                        .HasColumnType("int");

                    b.HasKey("OfficeId");

                    b.ToTable("Offices");

                    b.HasData(
                        new
                        {
                            OfficeId = 1,
                            OfficeCity = "Warszawa",
                            OfficeEmail = "informacja@sii.pl",
                            OfficeName = "Sii Warszawa",
                            OfficePostCode = "02-626",
                            OfficeReceptionTelephone = "+48 22 486 37 37",
                            OfficeStreet = "al. Niepodległości 69",
                            OpenYear = 2006
                        },
                        new
                        {
                            OfficeId = 2,
                            OfficeCity = "Gdańsk",
                            OfficeEmail = "informacja-gdansk@sii.pl",
                            OfficeName = "Sii Gdańsk",
                            OfficePostCode = "80-309",
                            OfficeReceptionTelephone = "+48 58 32 17 800",
                            OfficeStreet = "al. Grunwaldzka 472e",
                            OpenYear = 2008
                        },
                        new
                        {
                            OfficeId = 3,
                            OfficeCity = "Wrocław",
                            OfficeEmail = "informacja-wroclaw@sii.pl",
                            OfficeName = "Sii Wrocław",
                            OfficePostCode = "53-413",
                            OfficeReceptionTelephone = "+48 71 75 82 290",
                            OfficeStreet = "ul. Gwiaździsta 66",
                            OpenYear = 2009
                        },
                        new
                        {
                            OfficeId = 4,
                            OfficeCity = "Poznań",
                            OfficeEmail = "informacja-poznan@sii.pl",
                            OfficeName = "Sii Poznań",
                            OfficePostCode = "61-872",
                            OfficeReceptionTelephone = "+48 61 639 76 80",
                            OfficeStreet = "ul. Królowej Jadwigi 43",
                            OpenYear = 2010
                        },
                        new
                        {
                            OfficeId = 5,
                            OfficeCity = "Kraków",
                            OfficeEmail = "informacja-krakow@sii.pl",
                            OfficeName = "Sii Kraków",
                            OfficePostCode = "30-522",
                            OfficeReceptionTelephone = "+48 12 390 61 70",
                            OfficeStreet = "ul. Wielicka 28",
                            OpenYear = 2011
                        },
                        new
                        {
                            OfficeId = 6,
                            OfficeCity = "Łódź",
                            OfficeEmail = "informacja-lodz@sii.pl",
                            OfficeName = "Sii Łódź",
                            OfficePostCode = "90-033",
                            OfficeReceptionTelephone = "+48 42 239 29 60",
                            OfficeStreet = "ul. Kopcińskiego 79",
                            OpenYear = 2011
                        },
                        new
                        {
                            OfficeId = 7,
                            OfficeCity = "Lublin",
                            OfficeEmail = "informacja-lublin@sii.pl",
                            OfficeName = "Sii Lublin",
                            OfficePostCode = "20-883",
                            OfficeReceptionTelephone = "+48 81 45 46 888",
                            OfficeStreet = "ul. Szeligowskiego 6B",
                            OpenYear = 2012
                        },
                        new
                        {
                            OfficeId = 8,
                            OfficeCity = "Katowice",
                            OfficeEmail = "informacja-katowice@sii.pl",
                            OfficeName = "Sii Katowice",
                            OfficePostCode = "40-114",
                            OfficeReceptionTelephone = "+48 32 661 41 91",
                            OfficeStreet = "ul. Ściegiennego 3",
                            OpenYear = 2018
                        },
                        new
                        {
                            OfficeId = 9,
                            OfficeCity = "Rzeszów",
                            OfficeEmail = "informacja-rzeszow@sii.pl",
                            OfficeName = "Sii Rzeszów",
                            OfficePostCode = "35-310",
                            OfficeReceptionTelephone = "+48 17 283 83 15",
                            OfficeStreet = "ul. Rejtana 20",
                            OpenYear = 2018
                        },
                        new
                        {
                            OfficeId = 10,
                            OfficeCity = "Częstochowa",
                            OfficeEmail = "informacja-czestochowa@sii.pl",
                            OfficeName = "Sii Częstochowa",
                            OfficePostCode = "42-217",
                            OfficeStreet = "ul. Jasnogórska 79",
                            OpenYear = 2018
                        },
                        new
                        {
                            OfficeId = 11,
                            OfficeCity = "Piła",
                            OfficeEmail = "informacja-pila@sii.pl",
                            OfficeName = "Sii Piła",
                            OfficePostCode = "64-920",
                            OfficeStreet = "Kasztanowa Office, ul. Kossaka 20",
                            OpenYear = 2018
                        },
                        new
                        {
                            OfficeId = 12,
                            OfficeCity = "Bydgoszcz",
                            OfficeEmail = "informacja-bydgoszcz@sii.pl",
                            OfficeName = "Sii Bydgoszcz",
                            OfficePostCode = "85-033",
                            OfficeReceptionTelephone = "+48 52 523 92 67",
                            OfficeStreet = "Plac Kościeleckich 3",
                            OpenYear = 2018
                        },
                        new
                        {
                            OfficeId = 13,
                            OfficeCity = "Gliwice",
                            OfficeEmail = "informacja-gliwice@sii.pl",
                            OfficeName = "Sii Gliwice",
                            OfficePostCode = "44-100",
                            OfficeStreet = "Zygmunta Starego 24B",
                            OpenYear = 2019
                        },
                        new
                        {
                            OfficeId = 14,
                            OfficeCity = "Białystok",
                            OfficeEmail = "informacja-bialystok@sii.pl",
                            OfficeName = "Sii Białystok",
                            OfficePostCode = "15-402",
                            OfficeStreet = "Józefa Marjańskiego 3",
                            OpenYear = 2019
                        });
                });

            modelBuilder.Entity("Database.Models.Worker", b =>
                {
                    b.Property<int>("WorkerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OfficeId")
                        .HasColumnType("int");

                    b.Property<string>("WorkerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkerSurname")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WorkerId");

                    b.HasIndex("OfficeId");

                    b.ToTable("Workers");

                    b.HasData(
                        new
                        {
                            WorkerId = 1,
                            OfficeId = 3,
                            WorkerName = "Filip",
                            WorkerSurname = "Sygula"
                        },
                        new
                        {
                            WorkerId = 2,
                            OfficeId = 3,
                            WorkerName = "Katarzyna",
                            WorkerSurname = "C"
                        },
                        new
                        {
                            WorkerId = 3,
                            OfficeId = 3,
                            WorkerName = "Zbigniew",
                            WorkerSurname = "L"
                        },
                        new
                        {
                            WorkerId = 4,
                            OfficeId = 1,
                            WorkerName = "Big",
                            WorkerSurname = "Boss"
                        },
                        new
                        {
                            WorkerId = 5,
                            OfficeId = 1,
                            WorkerName = "Big",
                            WorkerSurname = "Supervisor"
                        });
                });

            modelBuilder.Entity("Database.Models.WorkerHobby", b =>
                {
                    b.Property<int>("HobbyId")
                        .HasColumnType("int");

                    b.Property<int>("WorkerId")
                        .HasColumnType("int");

                    b.HasKey("HobbyId", "WorkerId");

                    b.HasIndex("WorkerId");

                    b.ToTable("WorkerHobby");

                    b.HasData(
                        new
                        {
                            HobbyId = 1,
                            WorkerId = 1
                        },
                        new
                        {
                            HobbyId = 5,
                            WorkerId = 1
                        },
                        new
                        {
                            HobbyId = 7,
                            WorkerId = 1
                        },
                        new
                        {
                            HobbyId = 4,
                            WorkerId = 2
                        },
                        new
                        {
                            HobbyId = 10,
                            WorkerId = 2
                        },
                        new
                        {
                            HobbyId = 9,
                            WorkerId = 2
                        },
                        new
                        {
                            HobbyId = 8,
                            WorkerId = 3
                        },
                        new
                        {
                            HobbyId = 9,
                            WorkerId = 3
                        },
                        new
                        {
                            HobbyId = 1,
                            WorkerId = 3
                        },
                        new
                        {
                            HobbyId = 10,
                            WorkerId = 3
                        },
                        new
                        {
                            HobbyId = 10,
                            WorkerId = 4
                        },
                        new
                        {
                            HobbyId = 9,
                            WorkerId = 4
                        },
                        new
                        {
                            HobbyId = 1,
                            WorkerId = 5
                        });
                });

            modelBuilder.Entity("Database.Models.Worker", b =>
                {
                    b.HasOne("Database.Models.Office", "Office")
                        .WithMany("Workers")
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Database.Models.WorkerHobby", b =>
                {
                    b.HasOne("Database.Models.Hobby", "Hobby")
                        .WithMany("WorkerHobbies")
                        .HasForeignKey("HobbyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Models.Worker", "Worker")
                        .WithMany("WorkerHobbies")
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
